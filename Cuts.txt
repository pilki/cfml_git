

(********************************************************************)
(* ** Notation for specifications through [rep] predicate -- TODO?? *)

(*------------------------------------------------------------------*)
(* ** Printing specifications without effects 

Notation "'RepSpec' f ( X1 ';' A1 )  | R >> H"
  := (Spec_1 f (fun (x1:A1) R => forall X1, rep x1 X1 -> H))
     (at level 69, f at level 0, X1 ident, 
      R ident, H at level 90,
      A1 at level 0) : func.

Notation "'RepSpec' f ( X1 ';' A1 ) ( X2 ';' A2 )  | R >> H"
  := (Spec_2 f (fun (x1:A1) (x2:A2) R => 
       forall X1 X2, rep x1 X1 -> rep x2 X2 -> H))
     (at level 69, f at level 0, X1 ident, X2 ident, 
      R ident, H at level 90,
      A1 at level 0, A2 at level 0) : func.

Notation "'RepSpec' f ( X1 ; A1 ) ( X2 ; A2 ) ( X3 ; A3 )  | R >> H"
  := (Spec_3 f (fun (x1:A1) (x2:A2) (x3:A3) R => 
       forall X1 X2 X3, rep x1 X1 -> rep x2 X2 -> rep x3 X3 -> H))
     (at level 69, f at level 0, X1 ident, X2 ident, X3 ident, 
      R ident, H at level 90,
      A1 at level 0, A2 at level 0, A3 at level 0) : func.

Notation "'RepSpec' f ( X1 ; A1 ) ( X2 ; A2 ) ( X3 ; A3 ) ( X4 ; A4 )  | R >> H"
  := (Spec_4 f (fun (x1:A1) (x2:A2) (x3:A3) (x4:A4) R => 
        forall X1 X2 X3 X4, rep x1 X1 -> rep x2 X2 -> rep x3 X3 -> rep x4 X4 -> H))
     (at level 69, f at level 0, X1 ident, X2 ident, X3 ident, X4 ident, 
      R ident, H at level 90,
      A1 at level 0, A2 at level 0, A3 at level 0, A4 at level 0) : func.
*)

(*------------------------------------------------------------------*)
(* ** Printing specifications without auxiliary variables 

Notation "'RepSpecs' f ( X1 ; A1 ) >> H Q"
  := (Spec f (x1:A1) | R >> 
       forall X1, rep x1 X1 -> R H Q)
     (at level 69, f at level 0, X1 ident, H at level 0, 
      A1 at level 0) : func.

Notation "'RepSpecs' f ( X1 ; A1 ) ( X2 ; A2 ) >> H Q"
  := (Spec f (x1:A1) (x2:A2) | R >> 
       forall X1 X2, rep x1 X1 -> rep x2 X2 -> R H Q)
     (at level 69, f at level 0, X1 ident, X2 ident, H at level 0,
      A1 at level 0, A2 at level 0) : func.

Notation "'RepSpecs' f ( X1 ; A1 ) ( X2 ; A2 ) ( X3 ; A3 ) >> H Q"
  := (Spec f (x1:A1) (x2:A2) (x3:A3) | R >> 
       forall X1 X2 X3, rep x1 X1 -> rep x2 X2 -> rep x3 X3 -> R H Q)
     (at level 69, f at level 0, X1 ident, X2 ident, X3 ident, H at level 0,
      A1 at level 0, A2 at level 0, A3 at level 0) : func.

Notation "'RepSpecs' f ( X1 ; A1 ) ( X2 ; A2 ) ( X3 ; A3 ) ( X4 ; A4 ) >> H Q"
  := (Spec f (x1:A1) (x2:A2) (x3:A3) (x4:A4) | R >> 
       forall X1 X2 X3 X4, rep x1 X1 -> rep x2 X2 -> rep x3 X3 -> rep x4 X4 -> R H Q)
     (at level 69, f at level 0, X1 ident, X2 ident, X3 ident, X4 ident, H at level 0,
      A1 at level 0, A2 at level 0, A3 at level 0, A4 at level 0) : func.
*)

(*------------------------------------------------------------------*)
(* ** Printing general specifications

Notation "'RepPure' f ( X1 ; A1 ) >> P"
  := (Spec f (x1:A1) | R >> 
       forall X1, rep x1 X1 -> pure R P)
     (at level 69, f at level 0, X1 ident, 
      A1 at level 0) : func.

Notation "'RepPure' f ( X1 ; A1 ) ( X2 ; A2 ) >> P"
  := (Spec f (x1:A1) (x2:A2) | R >> 
       forall X1 X2, rep x1 X1 -> rep x2 X2 -> pure R P)
     (at level 69, f at level 0, X1 ident, X2 ident,
      A1 at level 0, A2 at level 0) : func.

Notation "'RepPure' f ( X1 ; A1 ) ( X2 ; A2 ) ( X3 ; A3 ) >> P"
  := (Spec f (x1:A1) (x2:A2) (x3:A3) | R >> 
       forall X1 X2 X3, rep x1 X1 -> rep x2 X2 -> rep x3 X3 -> pure R P)
     (at level 69, f at level 0, X1 ident, X2 ident, X3 ident,
      A1 at level 0, A2 at level 0, A3 at level 0) : func.

Notation "'RepPure' f ( X1 ; A1 ) ( X2 ; A2 ) ( X3 ; A3 ) ( X4 ; A4 ) >> P"
  := (Spec f (x1:A1) (x2:A2) (x3:A3) (x4:A4) | R >> 
       forall X1 X2 X3 X4, rep x1 X1 -> rep x2 X2 -> rep x3 X3 -> rep x4 X4 -> pure R P)
     (at level 69, f at level 0, X1 ident, X2 ident, X3 ident, X4 ident,
      A1 at level 0, A2 at level 0, A3 at level 0, A4 at level 0) : func.
 *)

(*------------------------------------------------------------------*)
(* ** Specification of output modulo representation *)

Notation "X '.;' T" := (fun (x:T) => rep x X) (at level 68). 
Notation "P '.:' T" := (fun (x:T) => exists X, rep x X /\ P X) (at level 80). 


(*
  (!For (fun H Q => (a > (b)%Z -> H ==> (Q tt)) /\ (a <= (b)%Z -> exists H', exists I,
       (H ==> I a \* H') 
    /\ (forall i, a <= i /\ i <= (b)%Z -> Q1 (I i) (# I(i+1))) 
    /\ (I ((b)%Z+1) \* H' ==> Q tt))))
  (at level 69, i ident) : charac.
*)
